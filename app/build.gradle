plugins {
    id 'kotlin-kapt'
    id 'kotlin-android'
    id 'com.android.application'
    id 'org.jetbrains.kotlin.plugin.parcelize'
    id 'com.google.devtools.ksp' version "$ksp"
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin"
}

def keystoreProperties = new Properties()
try {
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} catch(IOException ignored) {
    // We don't have release keys, ignoring
}

android {
    signingConfigs {
        debug {
            storeFile file('/home/zile995/.android/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (keystoreProperties['storeFile']) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storePassword keystoreProperties['storePassword']
                storeFile rootProject.file(keystoreProperties['storeFile'])
            }
        }
    }
    compileSdk 33

    defaultConfig {
        applicationId "com.stefan.simplebackup"
        minSdk 26
        targetSdk 33
        versionCode 200
        versionName '0.5.1'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        signingConfig signingConfigs.debug
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            multiDexEnabled false
            renderscriptOptimLevel 3
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix 'debug'
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES',
                         'META-INF/LICENSE',
                         'META-INF/LICENSE.txt',
                         'META-INF/license.txt',
                         'META-INF/NOTICE',
                         'META-INF/NOTICE.txt',
                         'META-INF/notice.txt',
                         'META-INF/ASL2.0',
                         'DebugProbesKt.bin']
        }
        jniLibs.useLegacyPackaging = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding true
    }

    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }

    compileSdkVersion 33
    namespace 'com.stefan.simplebackup'
}

dependencies {
    // Include all libs
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android / Material / UI
    implementation "androidx.core:core-ktx:$ktx"
    implementation "androidx.appcompat:appcompat:$appCompat"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.constraintlayout:constraintlayout:$constraint"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefresh"

    // Activity
    implementation "androidx.activity:activity-ktx:$activity"

    // Fragment
    implementation "androidx.fragment:fragment-ktx:$fragment"

    // Navigation component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    // Kotlin serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinSerialization"

    // WorkManager kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work"

    // Kotlin Room + Kotlin symbol processing (ksp)
    implementation "androidx.room:room-runtime:$room"
    implementation "androidx.room:room-ktx:$room"
    ksp "androidx.room:room-compiler:$room"

    // Google Auth
    implementation "com.google.android.gms:play-services-auth:$googleAuth"
    implementation "com.google.http-client:google-http-client-gson:$googleGson"
    implementation("com.google.api-client:google-api-client-android:$googleApiClient") {
        exclude group: 'org.apache.httpcomponents'
    }

    // Google Drive Api
    implementation("com.google.apis:google-api-services-drive:$googleDriveApi") {
        exclude group: 'org.apache.httpcomponents'
    }

    implementation "com.google.android.play:integrity:$integrity"

    // libsu core
    implementation "com.github.topjohnwu.libsu:core:$libsu"

    // Zip4j
    implementation "net.lingala.zip4j:zip4j:$zip4j"

    // LifeCycle + LiveData + ViewModel
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle"

    // Coil
    implementation "io.coil-kt:coil:$coil"

    // Shimmer
    implementation "com.facebook.shimmer:shimmer:$shimmer"

    /* Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary"

    /* Test
    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    */
}